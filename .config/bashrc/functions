#!/usr/bin/env bash
###################

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Add expression - NOTE
# certain symbols need backslashes
# eg 2 \* 2
calc() {
	bc -l <<< "$@"
}

# Extract files from (maybe compressed?) archive
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.jar)       jar xf $1    ;; 
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


rustdocs() {
  if  (($# != 1)); then
    echo "this tool downloads rust documentation for all the projects in a directory"
    echo "usage: rustfmt <projects root directory>"
  fi
  
  for file in $(find $1 -name "Cargo.toml"); do
    dir=$(dirname $file);
    pushd $dir;
      cargo doc
    popd
  done
}

# Compare original and gzipped file size
function sizeof_gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
compress() {
	local tmpFile="${1%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${1}" || return 1

	size=$(
	stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
	stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
	)

	local cmd=""
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"
	echo "${tmpFile}.gz created successfully."
}

#function sizeof() {
#  if du -b /dev/null > /dev/null 2>&1; then
#    local arg=-sbh;
#  else
#    local arg=-sh;
#  fi
#
#  if [[ -n "$@" ]]; then
#    du $arg -- "$@";
#  else
#    du $arg .[^.]* ./*;
#  fi;
#}

# Show all the names (CNs and SANs) listed in the SSL/TLS certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Spawns process outside of shell access
spawn() {
  $@ > /dev/null 2>&1 &
  disown
}

# uploads files to transfer.sh/
transfer() {                                                                                      
  if [ $# -eq 0 ]; then
	  echo -e "No arguments specified. Usage: echo transfer /tmp/test.md cat /tmp/test.md | transfer test.md";
    return 1;                                                                                                           fi
  tmpfile=$( mktemp -t transferXXX )                                                                                          
  if tty -s;                                                                                                                  
      then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')                                                         
      curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile                                      
  else
      curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile                                             
  fi
  cat $tmpfile
  rm -f $tmpfile
}


